CREATE TABLE FIDE_PROLEARN_FINAL_PROF.TESTI (
  PARA VARCHAR2(2)
);

/*CATEGORIAS*/


--Se busaca el ID de Categoria
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.CATEGORIA_FINDBYID_SP(
    P_ID_CATEGORIA IN NUMBER,
    P_CATEGORIA OUT SYS_REFCURSOR
)IS
BEGIN
    OPEN P_CATEGORIA FOR
    SELECT * FROM FIDE_PROLEARN_FINAL_PROF.FIDE_CATEGORIAS_TB 
    WHERE CATEGORIAS_TB_ID_CAT_PK = P_ID_CATEGORIA;
    
    INSERT INTO FIDE_PROLEARN_FINAL_PROF.TESTI (PARA) VALUES ('A');
    COMMIT;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN P_CATEGORIA := NULL;

END;
/



--Procedimiento para crear una categoria

CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.CATEGORIA_SAVE_SP(
  P_NOMBRE_CATEGORIA VARCHAR2
) IS
BEGIN

  INSERT INTO FIDE_PROLEARN_FINAL_PROF.FIDE_CATEGORIAS_TB (
    NOMBRE_CATEGORIA
  ) VALUES (
    P_NOMBRE_CATEGORIA
  );
  
  COMMIT;
END;
/



--Procedimiento para eliminar una categoria por su ID

CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.CATEGORIA_DELET_SP (
P_ID_CATEGORIA NUMBER) 
IS
  V_CURSOS_ASOCIADOS NUMBER;
BEGIN

  SELECT COUNT(*) INTO V_CURSOS_ASOCIADOS
  FROM FIDE_PROLEARN_FINAL_PROF.FIDE_CURSOS_TB
  WHERE CATEGORIA_CURSO = P_ID_CATEGORIA;
  
  IF V_CURSOS_ASOCIADOS > 0 THEN
  
    RAISE_APPLICATION_ERROR(-20001, 'No se puede eliminar la categoria porque hay cursos asociados.');
  ELSE
  
    DELETE FROM FIDE_PROLEARN_FINAL_PROF.FIDE_CATEGORIAS_TB
    WHERE CATEGORIAS_TB_ID_CAT_PK = P_ID_CATEGORIA;
    
    COMMIT;
  END IF;
END;
/



/*CURSOS*/

---Se obtiene el curso mediante el ID

CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.GET_CURSO_BY_ID_SP(
  P_ID_CURSO IN NUMBER,
  P_CURSOS OUT SYS_REFCURSOR
)
AS
BEGIN
  OPEN P_CURSOS FOR
    SELECT *
    FROM FIDE_CURSOS_TB
    WHERE CURSOS_TB_ID_CUR_PK = P_ID_CURSO;
END;
/

-- Procedimiento para agregar un curso

CREATE OR REPLACE PROCEDURE ADDCURSO(
    P_NOMBRE_CURSO IN VARCHAR2,
    P_DESCRP_CURSO IN VARCHAR2,
    P_ESTADO_CURSO IN NUMBER,
    P_THUMBNAIL_CURSO IN VARCHAR2,
    P_CATEGORIA_CURSO IN NUMBER
) AS
BEGIN
    INSERT INTO PROLEARN.CURSOS (NOMBRE_CURSO, DESCRP_CURSO, ESTADO_CURSO, THUMBNAIL_CURSO, CATEGORIA_CURSO)
    VALUES (P_NOMBRE_CURSO, P_DESCRP_CURSO, P_ESTADO_CURSO, P_THUMBNAIL_CURSO, P_CATEGORIA_CURSO);
    COMMIT;
END;
/




-- Procedimiento para actualizar un curso en especifico

CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.CURSO_UPDATE_SP(
    P_CURSOS_TB_ID_CUR_PK IN NUMBER,
    P_NOMBRE_CURSO IN VARCHAR2,
    P_DESCRP_CURSO IN VARCHAR2,
    P_ESTADO_CURSO IN NUMBER,
    P_THUMBNAIL_CURSO IN VARCHAR2,
    P_CATEGORIA_NOMBRE IN VARCHAR2
) AS
    V_CATEGORIA_ID NUMBER;
BEGIN

    SELECT CATEGORIAS_TB_ID_CAT_PK INTO V_CATEGORIA_ID
    FROM FIDE_PROLEARN_FINAL_PROF.FIDE_CATEGORIAS_TB
    WHERE NOMBRE_CATEGORIA = P_CATEGORIA_NOMBRE;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            INSERT INTO FIDE_PROLEARN_FINAL_PROF.FIDE_CATEGORIAS_TB (NOMBRE_CATEGORIA)
            VALUES (P_CATEGORIA_NOMBRE)
            RETURNING CATEGORIAS_TB_ID_CAT_PK INTO V_CATEGORIA_ID;

    UPDATE FIDE_PROLEARN_FINAL_PROF.FIDE_CURSOS_TB
    SET NOMBRE_CURSO = P_NOMBRE_CURSO,
        DESCRP_CURSO = P_DESCRP_CURSO,
        ESTADO_CURSO = P_ESTADO_CURSO,
        THUMBNAIL_CURSO = P_THUMBNAIL_CURSO,
        CATEGORIA_CURSO = V_CATEGORIA_ID
    WHERE CURSOS_TB_ID_CUR_PK = P_CURSOS_TB_ID_CUR_PK;

    COMMIT;
END;
/


-- Procedimiento para eliminar un curso
CREATE OR REPLACE PROCEDURE DELETECURSO(P_ID_CURSO IN NUMBER) AS
BEGIN
    DELETE FROM PROLEARN.CURSOS WHERE ID_CURSO = P_ID_CURSO;
    COMMIT;
END;
/
-- Procedimiento para listar todos los cursos
CREATE OR REPLACE PROCEDURE SP_LIST_COURSES IS
BEGIN
    FOR REC IN (SELECT * FROM PROLEARN.CURSOS) LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || REC.ID_CURSO || ', Nombre: ' 
|| REC.NOMBRE_CURSO || ', DescripciÃ³n: ' || REC.DESCRP_CURSO || ', Estado: ' 
|| REC.ESTADO_CURSO || ', CategorÃ­a: ' || REC.CATEGORIA_CURSO);
    END LOOP;
END;
/


/*CAPITULO_X_CURSO*/

-- Procedimiento para listar todos los capitulos de un curso

CREATE OR REPLACE PROCEDURE SP_LIST_CHAPTERS_OF_COURSE(
    P_ID_CURSO IN INT
) IS
BEGIN
    FOR REC IN (SELECT CH.ID_CAPITULO, CH.NOMBRE_CAPITULO, CH.VIDEO_CAPITULO, CH.NUMERO_CAPITULO
                FROM PROLEARN.CAPITULO_X_CURSO CXC
                JOIN PROLEARN.CAPITULO_HIJO CH ON CXC.ID_CAPITULO = CH.ID_CAPITULO
                WHERE CXC.ID_CURSO = P_ID_CURSO) LOOP
        DBMS_OUTPUT.PUT_LINE('ID CapÃ­tulo: ' || REC.ID_CAPITULO || 
                             ', Nombre CapÃ­tulo: ' || REC.NOMBRE_CAPITULO || 
                             ', Video CapÃ­tulo: ' || REC.VIDEO_CAPITULO || 
                             ', NÃºmero CapÃ­tulo: ' || REC.NUMERO_CAPITULO);
    END LOOP;
END;
/