CREATE TABLE FIDE_PROLEARN_FINAL_PROF.TESTI (
  PARA VARCHAR2(2)
);

--Crea la secuencia para la tabla de facturas
CREATE SEQUENCE FIDE_PROLEARN_FINAL_PROF.ID_FACTURA_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE;

--Crea la tabla de facturas
CREATE TABLE FIDE_PROLEARN_FINAL_PROF.FIDE_FACTURA_TB (
    FACTURA_TB_ID_FACTURA_PK NUMBER PRIMARY KEY,
    USUARIO_ID NUMBER,
    MONTO_ID NUMBER,
    FECHA_PAGO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_EXPIRACION TIMESTAMP,
    ESTADO_DELET_FACTURA NUMBER(1) NOT NULL,
    LAST_UPDATE_BY VARCHAR2(100),
    LAST_UPDATE_DATE DATE,
    CREATED_BY VARCHAR2(100),
    CREATION_DATE DATE,
    ACCION VARCHAR2(100),
    CONSTRAINT FK_FACTURA_USUARIO FOREIGN KEY (USUARIO_ID) 
        REFERENCES FIDE_PROLEARN_FINAL_PROF.FIDE_USUARIOS_TB(USUARIOS_TB_ID_USER_PK),
    CONSTRAINT FK_FACTURA_MONTO FOREIGN KEY (MONTO_ID) 
        REFERENCES FIDE_PROLEARN_FINAL_PROF.FIDE_MONTO_TB(MONTO_TB_ID_MT_PK)
);
/

--Crea el trigger para insertar el valor del secuenciador en la tabla de facturas
CREATE OR REPLACE TRIGGER FIDE_PROLEARN_FINAL_PROF.ID_FACTURA_TRG
BEFORE INSERT ON FIDE_PROLEARN_FINAL_PROF.FIDE_FACTURA_TB
FOR EACH ROW
BEGIN
    :NEW.FACTURA_TB_ID_FACTURA_PK := FIDE_PROLEARN_FINAL_PROF.ID_FACTURA_SEQ.NEXTVAL;
END;
/

-- Crear trigger para establecer ESTADO en TRUE despues de la insercion
CREATE OR REPLACE TRIGGER FIDE_PROLEARN_FINAL_PROF.FIDE_FACTURA_ESTADO_TRG
BEFORE INSERT ON FIDE_PROLEARN_FINAL_PROF.FIDE_FACTURA_TB
FOR EACH ROW
BEGIN
    :NEW.ESTADO_DELET_FACTURA := 1 ;
END;
/

--Crea el trigger de auditor√≠a para la tabla de facturas
CREATE OR REPLACE TRIGGER FIDE_PROLEARN_FINAL_PROF.FACTURA_TB_AUDIT_TRG
BEFORE INSERT OR UPDATE ON FIDE_PROLEARN_FINAL_PROF.FIDE_FACTURA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREATED_BY := USER;
        :NEW.CREATION_DATE := SYSTIMESTAMP;
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.LAST_UPDATE_BY := USER;
        :NEW.LAST_UPDATE_DATE := SYSTIMESTAMP;
        :NEW.ACCION := 'UPDATE';
    END IF;
END;

-------------------Otros procedimientos-----------------------------------------

CREATE OR REPLACE VIEW FIDE_PROLEARN_FINAL_PROF.FIDE_FACTURA_V AS
SELECT 
  FACTURA_TB_ID_FACTURA_PK,
  USUARIO_ID,
  MONTO_ID
FROM FIDE_PROLEARN_FINAL_PROF.FIDE_FACTURA_TB
WHERE ESTADO_DELET_FACTURA = 1;

CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.FACTURA_GET_BYID_SP (
  P_ID_FACTURA IN NUMBER,
  P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN P_RESULTADO FOR
        SELECT * FROM FIDE_PROLEARN_FINAL_PROF.FIDE_FACTURA_TB
        WHERE FACTURA_TB_ID_FACTURA_PK = P_ID_FACTURA;
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.FACTURA_GETALL_BY_CURSO_SP(
  P_ID_CURSO IN NUMBER,
  P_FACTURAS OUT SYS_REFCURSOR
)
AS
BEGIN
  OPEN P_FACTURAS FOR
    SELECT DISTINCT F.* 
    FROM FIDE_FACTURA_TB F
    JOIN FIDE_PROLEARN_FINAL_PROF.FIDE_CURSOS_TB C ON F.USUARIO_ID = C.CURSOS_TB_ID_CUR_PK
    WHERE C.CURSOS_TB_ID_CUR_PK = P_ID_CURSO
    ORDER BY F.FECHA_PAGO;
END;
/


CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.FACTURA_DELETE_SP(
  P_ID_FACTURA NUMBER
) AS
BEGIN
  UPDATE FIDE_PROLEARN_FINAL_PROF.FIDE_FACTURA_TB 
  SET ESTADO_DELET_FACTURA = 0
  WHERE FACTURA_TB_ID_FACTURA_PK = P_ID_FACTURA;
  COMMIT;
END;
/

--Procedimiento Almacenado para FIDE_FACTURA_TB

CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.FACTURA_UPSERT_SP(
  P_ID_FACTURA IN NUMBER,
  P_USUARIO_ID IN NUMBER,
  P_MONTO_ID IN NUMBER,
  V_ID_RESULTADO OUT NUMBER
) AS
  V_ID_NUEVA_FACTURA NUMBER;
BEGIN
  IF P_ID_FACTURA = 0 THEN
    INSERT INTO FIDE_PROLEARN_FINAL_PROF.FIDE_FACTURA_TB (
      USUARIO_ID,
      MONTO_ID
    ) VALUES (
      P_USUARIO_ID,
      P_MONTO_ID
    ) RETURNING FACTURA_TB_ID_FACTURA_PK INTO V_ID_NUEVA_FACTURA;
    
  ELSE
    UPDATE FIDE_PROLEARN_FINAL_PROF.FIDE_FACTURA_TB
    SET USUARIO_ID = P_USUARIO_ID,
        MONTO_ID = P_MONTO_ID
    WHERE FACTURA_TB_ID_FACTURA_PK = P_ID_FACTURA;
    
  END IF;
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RAISE;
END;