

/*USUARIOS*/
--Buscar por email
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.US_FIND_BY_EMAIL_SP(
  p_email IN FIDE_USUARIOS_TB.EMAIL%TYPE,
  p_usuario OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_usuario FOR
  SELECT * FROM FIDE_USUARIOS_TB
  WHERE EMAIL = p_email;
END US_FIND_BY_EMAIL_SP;
/
-- 
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.US_FIND_ALL_USUARIOS_SP(
  p_usuarios OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_usuarios FOR
  SELECT 
    USUARIOS_TB_ID_USER_PK,
    NOMBRE,
    APELLIDOS,
    EMAIL,
    PASSWORD
  FROM 
    FIDE_USUARIOS_TB;
END US_FIND_ALL_USUARIOS_SP;
/
--recuperar todas las entidades
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.US_FIND_USUARIO_BY_ID_SP(
  p_id IN NUMBER,
  p_usuario OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_usuario FOR
  SELECT 
    USUARIOS_TB_ID_USER_PK,
    NOMBRE,
    APELLIDOS,
    EMAIL,
    PASSWORD
  FROM 
    FIDE_USUARIOS_TB
  WHERE 
    USUARIOS_TB_ID_USER_PK = p_id;
END US_FIND_USUARIO_BY_ID_SP;

-- delete
--para eliminar un registro de la tabla
ALTER TABLE FIDE_USUARIOS_TB
ADD ESTADO VARCHAR2(10) DEFAULT 'ACTIVO';

CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.US_ACTUALIZAR_ESTADO_USUARIO_SP(
  p_id_usuario NUMBER,
  p_estado VARCHAR2 DEFAULT 'INACTIVO'
)
AS
BEGIN
  UPDATE FIDE_USUARIOS_TB
  SET ESTADO = p_estado
  WHERE USUARIOS_TB_ID_USER_PK = p_id_usuario;
  
--  COMMIT;
END;
/

BEGIN
  FIDE_PROLEARN_FINAL_PROF.US_ACTUALIZAR_ESTADO_USUARIO_SP(1, 'ACTIVO');
END;
/

--eliminar f√≠sicamente el registro de la tabla
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.US_ELIMINAR_USUARIO_SP(
  p_id_usuario NUMBER
)
AS
BEGIN
  DELETE FROM FIDE_USUARIOS_TB
  WHERE USUARIOS_TB_ID_USER_PK = p_id_usuario;
  
--  COMMIT;
END US_ELIMINAR_USUARIO_SP;
/

/*ROL*/
--findByNombre
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.RL_FIND_ROL_BY_NOMBRE_SP(
  p_nombre IN VARCHAR2,
  p_roles OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_roles FOR
  SELECT 
    ROL_TB_ID_ROL_PK,
    NOMBRE
  FROM 
    FIDE_ROL_TB
  WHERE 
    UPPER(NOMBRE) LIKE UPPER('%' || p_nombre || '%');
END RL_FIND_ROL_BY_NOMBRE_SP;
/

--SAVE ROL
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.RL_GUARDAR_ROL_SP(
  p_nombre IN VARCHAR2,
  p_id_rol OUT NUMBER
)
AS
BEGIN
  INSERT INTO FIDE_ROL_TB (NOMBRE)
  VALUES (p_nombre)
  RETURNING ROL_TB_ID_ROL_PK INTO p_id_rol;
  
 -- COMMIT;
END RL_GUARDAR_ROL_SP;
/

--delete ROL
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.RL_ELIMINAR_ROL_SP(
  p_id_rol IN NUMBER
)
AS
BEGIN
  DELETE FROM FIDE_ROL_TB
  WHERE ROL_TB_ID_ROL_PK = p_id_rol;
  
--  COMMIT;
END RL_ELIMINAR_ROL_SP;
/



/*USUARIO_ROL*/






/*CATEGORIAS*/






/*CAPITULO_PADRE*/

CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.CP_FINDBYID_SP (
  P_ID_CAPITULO_PADRE IN NUMBER,
  P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN P_RESULTADO FOR
        SELECT * FROM FIDE_PROLEARN_FINAL_PROF.FIDE_CAPITULO_PADRE_TB
        WHERE CAPITULO_PADRE_TB_ID_CP_PK = P_ID_CAPITULO_PADRE;
    
    INSERT INTO FIDE_PROLEARN_FINAL_PROF.TESTI (PARA) VALUES ('B');
    COMMIT; 

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        OPEN P_RESULTADO FOR SELECT NULL FROM DUAL WHERE 1=0;
END;




/*CAPITULO_HIJO*/
CREATE TABLE FIDE_PROLEARN_FINAL_PROF.TESTI (
  PARA VARCHAR2(2)
);


CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.CH_FINDBYID_SP (
    P_ID_CAPITULO_HIJO IN NUMBER,
    P_RESULTADO OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN P_RESULTADO FOR
        SELECT * FROM FIDE_PROLEARN_FINAL_PROF.FIDE_CAPITULO_HIJO_TB CH
        WHERE CH.CAPITULO_HIJO_TB_ID_CH_PK = P_ID_CAPITULO_HIJO;
    
    INSERT INTO FIDE_PROLEARN_FINAL_PROF.TESTI (PARA) VALUES ('A');
    COMMIT; 

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        OPEN P_RESULTADO FOR SELECT NULL FROM DUAL WHERE 1=0; 
END;    

select * from FIDE_PROLEARN_FINAL_PROF.TESTI;

--recuperar una entidad
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.CH_FINDALLBYCAPITULOPADREID_SP(
  p_id_capitulo_padre IN FIDE_CAPITULO_HIJO_TB.ID_CAPITULO_PADRE%TYPE,
  p_result OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_result FOR
  SELECT 
    CAPITULO_HIJO_TB_ID_CAPITULO_PK,
    ID_CAPITULO_PADRE,
    NOMBRE_CAPITULO,
    VIDEO_CAPITULO,
    NUMERO_CAPITULO
  FROM FIDE_PROLEARN_FINAL_PROF.FIDE_CAPITULO_HIJO_TB
  WHERE ID_CAPITULO_PADRE = p_id_capitulo_padre;
END CH_FINDALLBYCAPITULOPADREID_SP;

--save

CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.CH_SAVE_CAPITULO_HIJO_SP(
  p_id_capitulo_padre IN FIDE_CAPITULO_HIJO_TB.ID_CAPITULO_PADRE%TYPE,
  p_nombre_capitulo IN FIDE_CAPITULO_HIJO_TB.NOMBRE_CAPITULO%TYPE,
  p_video_capitulo IN FIDE_CAPITULO_HIJO_TB.VIDEO_CAPITULO%TYPE,
  p_numero_capitulo IN FIDE_CAPITULO_HIJO_TB.NUMERO_CAPITULO%TYPE,
  p_capitulo_hijo_id OUT FIDE_CAPITULO_HIJO_TB.CAPITULO_HIJO_TB_ID_CAPITULO_PK%TYPE
) AS
BEGIN
  IF p_capitulo_hijo_id IS NULL THEN
    -- Insertar nuevo registro
    INSERT INTO FIDE_CAPITULO_HIJO_TB (
      ID_CAPITULO_PADRE,
      NOMBRE_CAPITULO,
      VIDEO_CAPITULO,
      NUMERO_CAPITULO
    ) VALUES (
      p_id_capitulo_padre,
      p_nombre_capitulo,
      p_video_capitulo,
      p_numero_capitulo
    ) RETURNING CAPITULO_HIJO_TB_ID_CAPITULO_PK INTO p_capitulo_hijo_id;
  ELSE
    -- Actualizar registro existente
    UPDATE FIDE_CAPITULO_HIJO_TB
    SET
      ID_CAPITULO_PADRE = p_id_capitulo_padre,
      NOMBRE_CAPITULO = p_nombre_capitulo,
      VIDEO_CAPITULO = p_video_capitulo,
      NUMERO_CAPITULO = p_numero_capitulo
    WHERE CAPITULO_HIJO_TB_ID_CAPITULO_PK = p_capitulo_hijo_id;
  END IF;
END CH_SAVE_CAPITULO_HIJO_SP;


--delete
CREATE OR REPLACE PROCEDURE CH_DELETE_CAPITULO_HIJO_SP(
  p_capitulo_hijo_id IN FIDE_CAPITULO_HIJO_TB.CAPITULO_HIJO_TB_ID_CAPITULO_PK%TYPE
) AS
BEGIN
  DELETE FROM FIDE_CAPITULO_HIJO_TB
  WHERE CAPITULO_HIJO_TB_ID_CAPITULO_PK = p_capitulo_hijo_id;
END CH_DELETE_CAPITULO_HIJO_SP;

--

/*CURSOS*/
--llama al curso
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.CS_FIND_ALL_CURSOS_SP(
  p_cursos OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_cursos FOR
  SELECT 
    CURSOS_TB_ID_CUR_PK,
    NOMBRE_CURSO,
    DESCRP_CURSO,
    ESTADO_CURSO,
    THUMBNAIL_CURSO,
    CATEGORIA_CURSO
  FROM 
    FIDE_CURSOS_TB;
END CS_FIND_ALL_CURSOS_SP;
/

--
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.CS_FIND_CURSO_BY_ID_SP(
  p_id IN NUMBER,
  p_curso OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_curso FOR
  SELECT 
    CURSOS_TB_ID_CUR_PK,
    NOMBRE_CURSO,
    DESCRP_CURSO,
    ESTADO_CURSO,
    THUMBNAIL_CURSO,
    CATEGORIA_CURSO
  FROM 
    FIDE_CURSOS_TB
  WHERE 
    CURSOS_TB_ID_CUR_PK = p_id;
END CS_FIND_CURSO_BY_ID_SP;
/

-- save
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.CS_SAVE_CURSO_SP(
  p_nombre_curso IN VARCHAR2,
  p_descripcion_curso IN VARCHAR2,
  p_estado_curso IN NUMBER,
  p_thumbnail_curso IN VARCHAR2,
  p_categoria_curso IN NUMBER,
  p_id OUT NUMBER
) AS
BEGIN
  INSERT INTO FIDE_CURSOS_TB (
    NOMBRE_CURSO,
    DESCRP_CURSO,
    ESTADO_CURSO,
    THUMBNAIL_CURSO,
    CATEGORIA_CURSO
  ) VALUES (
    p_nombre_curso,
    p_descripcion_curso,
    p_estado_curso,
    p_thumbnail_curso,
    p_categoria_curso
  ) RETURNING CURSOS_TB_ID_CUR_PK INTO p_id;
END CS_SAVE_CURSO_SP;
/

--DELETE
CREATE OR REPLACE PROCEDURE CS_DELETE_CURSO_SP(
  p_id IN NUMBER
) AS
BEGIN
  -- Eliminar dependencias en FIDE_CATEGORIAS_TB
  DELETE FROM FIDE_CATEGORIAS_TB
  WHERE CATEGORIAS_TB_ID_CAT_PK IN (
    SELECT CATEGORIA_CURSO
    FROM FIDE_CURSOS_TB
    WHERE CURSOS_TB_ID_CUR_PK = p_id
  );
  
  -- Eliminar registro en FIDE_CURSOS_TB
  DELETE FROM FIDE_CURSOS_TB
  WHERE CURSOS_TB_ID_CUR_PK = p_id;
END CS_DELETE_CURSO_SP;
/

BEGIN
  FIDE_PROLEARN_FINAL_PROF.CS_DELETE_CURSO_SP(1);
END;

/*CAPITULO_X_CURSO*/






/*OTROS*/
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.CATEGORIA_FINDBYID_SP(
    P_ID_CATEGORIA IN NUMBER,
    P_CATEGORIA OUT SYS_REFCURSOR
)IS
BEGIN
    OPEN P_CATEGORIA FOR
    SELECT * FROM FIDE_PROLEARN_FINAL_PROF.FIDE_CATEGORIAS_TB 
    WHERE CATEGORIAS_TB_ID_CAT_PK = P_ID_CATEGORIA;
    
    INSERT INTO FIDE_PROLEARN_FINAL_PROF.TESTI (PARA) VALUES ('A');
    COMMIT;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN P_CATEGORIA := NULL;

END;




