

/*USUARIOS*/
--Buscar por email
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.US_FIND_BY_EMAIL_SP(
  p_email IN FIDE_USUARIOS_TB.EMAIL%TYPE,
  p_usuario OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_usuario FOR
  SELECT * FROM FIDE_USUARIOS_TB
  WHERE EMAIL = p_email;
END US_FIND_BY_EMAIL_SP;
/
-- 
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.US_FIND_ALL_USUARIOS_SP(
  p_usuarios OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_usuarios FOR
  SELECT 
    USUARIOS_TB_ID_USUARIOS_PK,
    NOMBRE,
    APELLIDOS,
    EMAIL,
    PASSWORD
  FROM 
    FIDE_USUARIOS_TB;
END US_FIND_ALL_USUARIOS_SP;
/
--recuperar todas las entidades
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.US_FIND_USUARIO_BY_ID_SP(
  p_id IN NUMBER,
  p_usuario OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_usuario FOR
  SELECT 
    USUARIOS_TB_ID_USUARIOS_PK,
    NOMBRE,
    APELLIDOS,
    EMAIL,
    PASSWORD
  FROM 
    FIDE_USUARIOS_TB
  WHERE 
    USUARIOS_TB_ID_USUARIOS_PK = p_id;
END US_FIND_USUARIO_BY_ID_SP;

--


/*ROL*/






/*USUARIO_ROL*/






/*CATEGORIAS*/






/*CAPITULO_PADRE*/






/*CAPITULO_HIJO*/
CREATE TABLE FIDE_PROLEARN_FINAL_PROF.TESTI (
  PARA VARCHAR2(2)
);


CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.CH_FINDBYID_SP(
    P_ID_CAPITULO_HIJO IN NUMBER,
    P_CAPITULO_HIJO OUT FIDE_PROLEARN_FINAL_PROF.FIDE_CAPITULO_HIJO_TB%ROWTYPE
)IS
BEGIN
    SELECT * INTO P_CAPITULO_HIJO FROM FIDE_PROLEARN_FINAL_PROF.FIDE_CAPITULO_HIJO_TB 
    WHERE CAPITULO_HIJO_TB_ID_CH_PK = P_ID_CAPITULO_HIJO;
    
    INSERT INTO FIDE_PROLEARN_FINAL_PROF.TESTI (PARA) VALUES ('A');
    COMMIT;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN P_CAPITULO_HIJO := NULL;

END;

select * from FIDE_PROLEARN_FINAL_PROF.TESTI;

--recuperar una entidad
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.CH_FINDALLBYCAPITULOPADREID_SP(
  p_id_capitulo_padre IN FIDE_CAPITULO_HIJO_TB.ID_CAPITULO_PADRE%TYPE,
  p_result OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_result FOR
  SELECT 
    CAPITULO_HIJO_TB_ID_CAPITULO_PK,
    ID_CAPITULO_PADRE,
    NOMBRE_CAPITULO,
    VIDEO_CAPITULO,
    NUMERO_CAPITULO
  FROM FIDE_PROLEARN_FINAL_PROF.FIDE_CAPITULO_HIJO_TB
  WHERE ID_CAPITULO_PADRE = p_id_capitulo_padre;
END CH_FINDALLBYCAPITULOPADREID_SP;

--save

CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.CH_SAVE_CAPITULO_HIJO_SP(
  p_id_capitulo_padre IN FIDE_CAPITULO_HIJO_TB.ID_CAPITULO_PADRE%TYPE,
  p_nombre_capitulo IN FIDE_CAPITULO_HIJO_TB.NOMBRE_CAPITULO%TYPE,
  p_video_capitulo IN FIDE_CAPITULO_HIJO_TB.VIDEO_CAPITULO%TYPE,
  p_numero_capitulo IN FIDE_CAPITULO_HIJO_TB.NUMERO_CAPITULO%TYPE,
  p_capitulo_hijo_id OUT FIDE_CAPITULO_HIJO_TB.CAPITULO_HIJO_TB_ID_CAPITULO_PK%TYPE
) AS
BEGIN
  IF p_capitulo_hijo_id IS NULL THEN
    -- Insertar nuevo registro
    INSERT INTO FIDE_CAPITULO_HIJO_TB (
      ID_CAPITULO_PADRE,
      NOMBRE_CAPITULO,
      VIDEO_CAPITULO,
      NUMERO_CAPITULO
    ) VALUES (
      p_id_capitulo_padre,
      p_nombre_capitulo,
      p_video_capitulo,
      p_numero_capitulo
    ) RETURNING CAPITULO_HIJO_TB_ID_CAPITULO_PK INTO p_capitulo_hijo_id;
  ELSE
    -- Actualizar registro existente
    UPDATE FIDE_CAPITULO_HIJO_TB
    SET
      ID_CAPITULO_PADRE = p_id_capitulo_padre,
      NOMBRE_CAPITULO = p_nombre_capitulo,
      VIDEO_CAPITULO = p_video_capitulo,
      NUMERO_CAPITULO = p_numero_capitulo
    WHERE CAPITULO_HIJO_TB_ID_CAPITULO_PK = p_capitulo_hijo_id;
  END IF;
END CH_SAVE_CAPITULO_HIJO_SP;


--delete
CREATE OR REPLACE PROCEDURE CH_DELETE_CAPITULO_HIJO_SP(
  p_capitulo_hijo_id IN FIDE_CAPITULO_HIJO_TB.CAPITULO_HIJO_TB_ID_CAPITULO_PK%TYPE
) AS
BEGIN
  DELETE FROM FIDE_CAPITULO_HIJO_TB
  WHERE CAPITULO_HIJO_TB_ID_CAPITULO_PK = p_capitulo_hijo_id;
END CH_DELETE_CAPITULO_HIJO_SP;

--

/*CURSOS*/






/*CAPITULO_X_CURSO*/






/*OTROS*/





