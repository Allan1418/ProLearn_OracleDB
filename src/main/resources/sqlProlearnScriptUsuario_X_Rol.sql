CREATE TABLE FIDE_PROLEARN_FINAL_PROF.TESTI (
  PARA VARCHAR2(2)
);


/*USUARIOS*/

-- Procedimiento para agregar un usuario
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.USER_ADD_SP (
    P_NOMBRE IN VARCHAR2,
    P_APELLIDOS IN VARCHAR2,
    P_EMAIL IN VARCHAR2,
    P_PASSWORD IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_PROLEARN_FINAL_PROF.FIDE_USUARIOS_TB (NOMBRE, APELLIDOS, EMAIL, PASSWORD)
    VALUES (P_NOMBRE, P_APELLIDOS, P_EMAIL, P_PASSWORD);
    COMMIT;
END;
/



-- Procedimiento para eliminar un usuario
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.USER_DELETE_SP (
  P_ID IN NUMBER
) AS
BEGIN

  DELETE FROM FIDE_PROLEARN_FINAL_PROF.FIDE_USUARIO_ROL_TB
  WHERE USUARIO_ID = P_ID;

  DELETE FROM FIDE_PROLEARN_FINAL_PROF.FIDE_USUARIOS_TB
  WHERE USUARIOS_TB_ID_USER_PK = P_ID;

  COMMIT;
END;
/



-- Procedimiento para listar todos los usuarios

CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.USER_FINDAL_SP(
    P_CURSOR OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_CURSOR FOR SELECT * FROM FIDE_PROLEARN_FINAL_PROF.FIDE_USUARIOS_TB;
END;
/
BEGIN
    DECLARE
    V_CURSOR   SYS_REFCURSOR; 
    V_REGISTRO FIDE_PROLEARN_FINAL_PROF.FIDE_USUARIOS_TB%ROWTYPE;
    BEGIN FIDE_PROLEARN_FINAL_PROF.SP_FINDALL_USER(
    V_CURSOR);
        LOOP
            FETCH V_CURSOR INTO V_REGISTRO;
            EXIT WHEN V_CURSOR%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('ID: '
                                 || V_REGISTRO.USUARIOS_TB_ID_USER_PK|| ', NOMBRE: ' || V_REGISTRO.NOMBRE ||
                                 ', APELLIDOS: '|| V_REGISTRO.APELLIDOS || ', EMAIL: '|| V_REGISTRO.EMAIL);
        END LOOP;
        CLOSE V_CURSOR;
    END;
END;
/

-- Procedimiento para obtener un usuario por correo electronico

CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.USER_GET_BY_EMAILL_SP(
    P_EMAIL VARCHAR2)
AS
    V_NOMBRE     VARCHAR2(250);
    V_APELLIDOS  VARCHAR2(250);
    V_ID_USUARIO NUMBER;
BEGIN
    SELECT NOMBRE, APELLIDOS, USUARIOS_TB_ID_USER_PK
    INTO V_NOMBRE, V_APELLIDOS, V_ID_USUARIO
    FROM FIDE_PROLEARN_FINAL_PROF.FIDE_USUARIOS_TB
    WHERE EMAIL = P_EMAIL;

    DBMS_OUTPUT.PUT_LINE('ID Usuario: ' || V_ID_USUARIO);
    DBMS_OUTPUT.PUT_LINE('Nombre: ' || V_NOMBRE);
    DBMS_OUTPUT.PUT_LINE('Apellidos: ' || V_APELLIDOS);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró el usuario con correo electrónico ' || P_EMAIL);
END;
/


/*ROL*/ 

-- Procedimiento para crear un nuevo rol
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.ROLE_CREATE_SP(
    P_NOMBRE IN VARCHAR2
) IS
BEGIN
    INSERT INTO FIDE_PROLEARN_FINAL_PROF.FIDE_ROL_TB (NOMBRE)
    VALUES (P_NOMBRE);
    COMMIT;
END;
/




-- Procedimiento para obtener un rol por nombre

CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.ROL_FINDBY_NOMBRE_SP(
    P_NOMBRE VARCHAR2
)
AS
    V_ID_ROL NUMBER;
    V_NOMBRE_ROL VARCHAR2(255);
BEGIN
    SELECT ROL_TB_ID_ROL_PK, NOMBRE
    INTO V_ID_ROL, V_NOMBRE_ROL
    FROM FIDE_PROLEARN_FINAL_PROF.FIDE_ROL_TB
    WHERE NOMBRE = P_NOMBRE;

    DBMS_OUTPUT.PUT_LINE('ID Rol: ' || V_ID_ROL);
    DBMS_OUTPUT.PUT_LINE('Nombre Rol: ' || V_NOMBRE_ROL);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró el rol con nombre ' || P_NOMBRE);
END;
/




/*USUARIO_ROL*/

-- Procedimiento para asignar un rol a un usuario
CREATE OR REPLACE PROCEDURE FIDE_PROLEARN_FINAL_PROF.ROLE_ASSIGN_SP(
    P_USUARIO_ID IN INT,
    P_ROL_ID IN INT
) IS
BEGIN
    INSERT INTO FIDE_PROLEARN_FINAL_PROF.FIDE_USUARIO_ROL_TB (USUARIO_ID, ROL_ID)
    VALUES (P_USUARIO_ID, P_ROL_ID);
    COMMIT;
END;
/



